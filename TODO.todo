# t BaseUrlGreeting IframePage InfoTest SessionURLs WebsocketHttpErrors JSONEncoding XhrPolling JsonPolling RawWebsocket WebsocketHybi10
# t WebsocketHixie76 # don't mind test_haproxy, it passes on 0.2.1
# t Protocol
# t XhrStreaming EventSource HtmlFile
# t HandlingClose
# t Http11 Http10

Something like on_close event:
- Q: "Can I detect that client has closed the connection? I mean if client starts a long request, pulls, pulls and then close it? I'd need some def on_close, is there any way how to do so?"
- Andre's response: "There's no reliable way to know when the client closes the connection. The best way I know is to send a ping (heartbeat) at interval. Once you stop receiving those pings, you know the connection is closed."
- My research: "Sadly this really is impossible with Thin. Thin uses EventMachine to handle low-level socket stuff. EventMachine, however doesn't use socket.js from the standard library, but its own C++ code to handle sockets. It doesn't give an access to them and by nature of extension code, we can't simply access instance variables as we could from Ruby."

  Failing tests due to this issue:
  - Protocol.test_simpleSession: AssertionError: 'a[]\n' != 'c[2010,"Another connection still open"]\n'. The problem is that we close the first connection sending 'a[""]\n' which is really, really wrong, it's supposed to hang.
  - HandlingClose.test_abort_xhr_polling: AssertionError: 'a[]\n' != 'c[2010,"Another connection still open"]\n'
  - HandlingClose.test_abort_xhr_streaming: self.assertTrue(r3.read() in ['o\n', 'c[1002,"Connection interrupted"]\n'])

Keep-Alive:
- Http11.test_synchronous: It does work, but it isn't correct HTTP 1.1. Thin's fault though.

Release (2.5 days):
- Publish to RubyGems.org.
- Short announcement for the RabbitMQ blog (1/2 day).
- Post for RubyInside.com (1 day).
- Real-world example (1 day).
