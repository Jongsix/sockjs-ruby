# alias t="./venv/bin/python sockjs-protocol-0.2.1.py $1"

SockJS 0.2.1 Protocol Tests:

  ✓ BaseUrlGreeting

  ✓ IframePage

  InfoTest (not supported yet):
  - test_basic: status AssertionError: 404 != 200
  - test_entropy: fails with ValueError, but it's the same problem really.
  - test_options: status AssertionError: 404 != 200
  - test_disabled_websocket: status AssertionError: 404 != 200

  SessionURLs:
  - test_anyValue: AssertionError: '' != 'o\n'
  - test_ignoringServerId: AssertionError: '' != 'o\n'

  Protocol:
  - test_simpleSession: Fail if there's more than one open connection to given session. At the moment there's no infrastructure for this in place, we don't keep the status. See transport.coffee of sockjs-node.
  - test_closeSession: AssertionError: '' != 'o\n'

  WebsocketHttpErrors:
  - test_invalidMethod: This is some shit Rack does. We're responding with [405, {}, []], there's no doubt about it, but the client gets "empty reply from server".

  WebsocketHixie76:
  ✓ test_transport
  ✓ test_close
  ✓ test_empty_frame
  - test_reuseSessionId: Hangs for ages, then ConnectionClosedException; this functionality is not supported yet.
  ✓ test_headersSanity
  ✓ test_broken_json

  WebsocketHybi10:
  ✓ test_transport
  - test_close: It's sending ~> WS#send ["", :close, 1000] and we're getting Empty exception in the tests.
  ✓ test_headersSanity
  ✓ test_broken_json
  - test_firefox_602_connection_header: status AssertionError: 200 != 101

  XhrPolling:
  ✓ test_options
  - test_transport: AssertionError: '' != 'o\n'
  ✓ test_invalid_session
  - test_invalid_json: AssertionError: '' != 'o\n'
  - test_content_types: AssertionError: '' != 'o\n'
  - test_jsessionid: AssertionError: '' != 'o\n'

  XhrStreaming:
  ✓ test_options
  - test_transport: timed out
  - test_response_limit: timed out

  EventSource:
  - test_transport: timed out
  - test_response_limit: timed out

  HtmlFile:
  - test_transport: Missing cookie.
  - test_response_limit: timed out

  JsonPolling:
  - test_transport: Missing cookie.
  - test_close: AssertionError: '' != 'x("o");\r\n'
  - test_content_types: AssertionError: '' != 'x("o");\r\n'
  - test_invalid_json: AssertionError: '' != 'x("o");\r\n'

  RawWebsocket:
  - test_transport: timed out
  - test_close: timed out

  JSONEncoding:
  - test_xhr_server_encodes: AssertionError: '' != 'o\n'
  - test_xhr_server_decodes: AssertionError: '' != 'o\n'

  HandlingClose:
  - test_close_frame: timed out
  - test_close_request: timed out
  - test_abort_xhr_streaming: timed out
  - test_abort_xhr_polling: AssertionError: '' != 'o\n'

  Http10:
  - test_synchronous: AssertionError: 'chunked' is not False
  - test_streaming: AssertionError: 'chunked' is not False

  Http11:
  - test_synchronous: "Your server doesn't support connection:Keep-Alive"
  - test_streaming: timed out


Implementation:
✓ It might be a good idea to make it really agnostic and make Rack just an adapter. Use Node.js-like HttpResponse object.
✓ Apparently we can't make Thin respond in HTTP/1.0. In order to support chunking, we therefore need to implement something like Rack::Chunking::Body   https://github.com/rack/rack/blob/master/lib/rack/chunked.rb#L11 We can't use the class straight away, because it's synchronous and it doesn't play well with EventMachine. Bloody hell!
- Support polling with HTTP 1.0 (see https://github.com/rack/rack/blob/master/lib/rack/chunked.rb#L44-53)
- curl -X POST http://localhost:8080/echo/a/b/xhr -vv should return o frame, the next curl -X POST http://localhost:8080/echo/a/b/xhr -vv should hang and return a message if there's any or heartbeat after the timeout (see disconnect_delay in sockjs-node).
- If there's another request during the closing 5s, we are supposed to reply with another closing frame and reset the timer to wait for another 5s.

Protocol:
- Heartbeat
