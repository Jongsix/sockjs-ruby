# t BaseUrlGreeting IframePage InfoTest SessionURLs WebsocketHttpErrors JSONEncoding
# t Protocol
# t XhrPolling
# t JsonPolling
# t XhrStreaming EventSource HtmlFile
# t HandlingClose
# t Http11


Bugs:
- HandlingClose.test_abort_xhr_streaming: timed out
- HandlingClose.test_close_frame: timed out
- HandlingClose.test_close_request: timed out
- Http11.test_streaming: timed out
- XhrPolling.test_invalid_json: timed out

- XhrPolling.test_transport: No headers

- Protocol.test_simpleSession: AssertionError: 'a[]\n' != 'c[2010,"Another connection still open"]\n'. The problem is that we close the first connection sending 'a[""]\n' which is really, really wrong, it's supposed to hang. None the less we MUST NOT block the whole thread. It should not be a problem as Thin is EventMachine-based, but we must make sure it's alright.
- HandlingClose.test_abort_xhr_polling: AssertionError: 'a[]\n' != 'c[2010,"Another connection still open"]\n'

- WebsocketHybi10.test_close: Empty.
- WebsocketHybi10.test_broken_json: Empty.

- WebsocketHixie76.test_broken_json: WebSocketException: Invalid frame type

- WebsocketHixie76.test_reuseSessionId: Hangs for ages, then ConnectionClosedException; this functionality is not supported yet.

- @disconnect_timer doesn't work as it's supposed to, it's set up even in WS and streaming on request.open, NOT on request.close


Not implemented:

  GC by closing request:
  - XhrStreaming.test_response_limit
  - EventSource.test_response_limit
  - HtmlFile.test_response_limit

  RawWebsocket:
  - Not supported yet (this is /websocket, NOT /*/*/websocket!)

  Heartbeat:
  - (curl -X POST http://localhost:8081/echo/a/b/xhr -vv should return o frame, the next curl -X POST http://localhost:8081/echo/a/b/xhr -vv should hang and return a message if there's any or heartbeat after the timeout).


Thin IRC (I've already asked Marc-Andre, waiting for the response):
- Http11.test_synchronous: [Errno 54] Connection reset by peer. Thin does support Keep-Alive since 0.7.0 https://groups.google.com/group/thin-ruby/browse_thread/thread/4eb696ea517fba2b?pli=1, so what's the problem? This should really work by default, according to the documentation. Only if we'd set --max-persistent-conns to 0, then Keep-Alive would be disabled, but we didn't do that AND it defaults to 512.
- Http10 (supporting HTTP 1.0 is not a priority, but it should be easy enough to do so if Thin gives us the choice to respond in 1.0 which might be tricky. See https://github.com/rack/rack/blob/master/lib/rack/chunked.rb#L44-53).


Release:
- Update to the newest Faye.
- Publish to RubyGems.org
- Blog post for RabbitMQ blog
- Post for RubyInside.com
