# alias t="./venv/bin/python sockjs-protocol-0.2.1.py $1"

SockJS 0.2.1 Protocol Tests:

  ✓ BaseUrlGreeting

  ✓ IframePage

  ✓ InfoTest

  SessionURLs:
  - test_anyValue: AssertionError: '' != 'o\n' (note: it doesn't fail in the first run). Discuss with @majek
  - test_ignoringServerId: AssertionError: '' != 'a["a"]\n'

  Protocol:
  - test_simpleSession: Fail if there's more than one open connection to given session. At the moment there's no infrastructure for this in place, we don't keep the status. See transport.coffee of sockjs-node. AssertionError: '' != 'a["a"]\n'
  - test_closeSession: Crashes with thin.rb:91:in `write': Body isn't open (status: closed) (RuntimeError).

  WebsocketHttpErrors:
  - test_invalidMethod: I do believe this is actually right and there's a problem on the Python side. Please note that it actually fails on "r = POST(base_url + '/0/0/websocket', headers=h)" line, not during verify405(). Check WebsocketHttpErrors.test_invalidMethod.txt for more info. Discuss with @majek.

  WebsocketHixie76:
  - test_reuseSessionId: Exception `SockJS::SessionUnavailableError' at /Users/botanicus/Dropbox/Projects/sockjs/ruby/lib/sockjs/transport.rb:115 - Session is closing (before: Hangs for ages, then ConnectionClosedException; this functionality is not supported yet.)
  - test_haproxy: '\x00o\xff' != '\xca4\x00\xd8\xa5\x08G\x97,\xd5qZ\xba\xbfC{'

  WebsocketHybi10:
  - test_close: It's sending ~> WS#send ["", :close, 1000] and we're getting Empty exception in the tests. Some low-level wire debugging is necessary. Check faye-error.txt for more info.
  - test_broken_json: sockjs/session.rb:166 - undefined method `body' for nil (before: AssertionError: ConnectionClosedException not raised & then it just hangs.)

  XhrPolling:
  - test_transport: AssertionError: '' != 'a["x"]\n'
  - test_invalid_json: SessionUnavailableError

  XhrStreaming:
  - test_transport: timed out
  - test_response_limit: timed out

  EventSource:
  - test_transport: timed out
  - test_response_limit: timed out

  HtmlFile:
  - test_transport: timed out
  - test_response_limit: timed out

  JsonPolling:
  - test_transport: AssertionError: '' != 'callback("a[\\"x\\"]");\r\n'
  - test_close: Crashes with: thin.rb:91:in `write': Body isn't open (status: closed) (RuntimeError)
  - test_content_types: AssertionError: '' != 'x("a[\\"abc\\",\\"%61bc\\"]");\r\n'
  - test_invalid_json: AssertionError: 200 != 500

  RawWebsocket:
  - test_transport: timed out
  - test_close: timed out

  JSONEncoding:
  - test_xhr_server_encodes: AssertionError: '' != '"\\u200c\\u200d\\u200e\\u200f\\u2028\\u2029\\u202a\\u202b\\u202c\\u202d\\u202e\\u202f\\u2060\\u2061\\u2062\\u2063\\u2064\\u2065\\u2066\\u2067\\u2068\\u2069\\u206a\\u206b\\u206c\\u206d\\u206e\\u206f\\ufff0\\ufff1\\ufff2\\ufff3\\ufff4\\ufff5\\ufff6\\ufff7\\ufff8\\ufff9\\ufffa\\ufffb\\ufffc\\ufffd\\ufffe\\uffff"'
  - test_xhr_server_decodes: ValueError: No JSON object could be decoded

  HandlingClose:
  - test_close_frame: timed out
  - test_close_request: timed out
  - test_abort_xhr_streaming: timed out
  - test_abort_xhr_polling: AssertionError: '' != 'c[2010,"Another connection still open"]\n'

  Http10 (HTTP 1.0 is not supported by decision ... the protocol doesn't say if it's MUST or SHOULD):
  - test_synchronous: AssertionError: 'chunked' is not False
  - test_streaming: AssertionError: 'chunked' is not False

  Http11:
  - test_synchronous: [Errno 54] Connection reset by peer. Thin does support Keep-Alive since 0.7.0 https://groups.google.com/group/thin-ruby/browse_thread/thread/4eb696ea517fba2b?pli=1, so what's the problem? This should really work by default, according to the documentation. Only if we'd set --max-persistent-conns to 0, then Keep-Alive would be disabled, but we didn't do that AND it defaults to 512. Screw it, let's ask on IRC.
  - test_streaming: timed out


Implementation:
✓ It might be a good idea to make it really agnostic and make Rack just an adapter. Use Node.js-like HttpResponse object.
✓ Apparently we can't make Thin respond in HTTP/1.0. In order to support chunking, we therefore need to implement something like Rack::Chunking::Body   https://github.com/rack/rack/blob/master/lib/rack/chunked.rb#L11 We can't use the class straight away, because it's synchronous and it doesn't play well with EventMachine. Bloody hell!
- Support polling with HTTP 1.0 (see https://github.com/rack/rack/blob/master/lib/rack/chunked.rb#L44-53)
- curl -X POST http://localhost:8081/echo/a/b/xhr -vv should return o frame, the next curl -X POST http://localhost:8081/echo/a/b/xhr -vv should hang and return a message if there's any or heartbeat after the timeout (see disconnect_delay in sockjs-node).
- If there's another request during the closing 5s, we are supposed to reply with another closing frame and reset the timer to wait for another 5s.

Protocol:
- Heartbeat. Discuss with @majek.
