h1. About

SockJS is WebSocket emulation library. It means that you use the WebSocket API, only instead of @WebSocket@ class you instantiate @SockJS@ class. I highly recommend to read "SockJS: WebSocket emulation":http://www.rabbitmq.com/blog/2011/09/13/sockjs-websocket-emulation on the RabbitMQ blog.

h2. The Client-Side Part

For the client-side part you need to use JS library "sockjs-client":http://sockjs.github.com/sockjs-client which provides WebSocket-like API. Here's an example:

<pre>
<script src="http://sockjs.github.com/sockjs-client/sockjs-latest.min.js"></script>

<script>
  var sock = new SockJS("http://mydomain.com/my_prefix");

  sock.onopen = function() {
    console.log('open');
  };

  sock.onmessage = function(e) {
    console.log('message', e.data);
  };

  sock.onclose = function() {
    console.log('close');
  };
</script>
</pre>

h2. The Server-Side Part

Now in order to have someone to talk to, we need to run a server and that's exactly what is sockjs-ruby good for. Here's an example how the API *will* look like:

<pre>
require "sockjs"

EM.run do
  SockJS::Server.start(port: 9999) do |server|
    server.onopen do
      puts "~ Server has been opened!"
    end

    server.onclose do
      puts "~ Server has been closed, bye!"
    end

    # Implement echo server.
    server.onmessage do |message|
      server.send(message)
    end
  end
end
</pre>

h2. Using SockJS in Web Frameworks

<pre>
require "rack/sockjs"

SockJS.start do |connection|
  use Rack::SockJS, connection, "/echo"
  run MyUltraCoolApp
end
</pre>

h2. SockJS Family

* "SockJS-client":https://github.com/sockjs/sockjs-client JavaScript client library.
* "SockJS-node":https://github.com/sockjs/sockjs-node Node.js server.
* "SockJS-ruby":https://github.com/sockjs/sockjs-ruby Ruby server.
* "SockJS-protocol":https://github.com/sockjs/sockjs-protocol protocol documentation.

h1. Links

* "SockJS: WebSocket emulation":http://www.rabbitmq.com/blog/2011/09/13/sockjs-websocket-emulation
* "SockJS: web messaging ain't easy":http://www.rabbitmq.com/blog/2011/08/22/sockjs-web-messaging-aint-easy
* "PubSubHuddle Realtime Web talk":http://www.rabbitmq.com/blog/2011/09/26/pubsubhuddle-realtime-web-talk
